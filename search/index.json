[{"content":"这是第三篇s ","date":"2022-08-28T00:00:00Z","permalink":"https://sandyness.github.io/p/%E6%88%91%E7%9A%84%E9%9A%8F%E6%83%B3/","title":"我的随想"},{"content":"Model Generator 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Generator(nn.Module): \u0026#34;\u0026#34;\u0026#34; Input shape: (batch, in_dim) Output shape: (batch, 3, 64, 64) \u0026#34;\u0026#34;\u0026#34; def __init__(self, in_dim, feature_dim=64): super().__init__() #input: (batch, 100) self.l1 = nn.Sequential( nn.Linear(in_dim, feature_dim * 8 * 4 * 4, bias=False), nn.BatchNorm1d(feature_dim * 8 * 4 * 4), nn.ReLU() ) self.l2 = nn.Sequential( self.dconv_bn_relu(feature_dim * 8, feature_dim * 4), #(batch, feature_dim * 16, 8, 8) self.dconv_bn_relu(feature_dim * 4, feature_dim * 2), #(batch, feature_dim * 16, 16, 16) self.dconv_bn_relu(feature_dim * 2, feature_dim), #(batch, feature_dim * 16, 32, 32) ) self.l3 = nn.Sequential( nn.ConvTranspose2d(feature_dim, 3, kernel_size=5, stride=2, padding=2, output_padding=1, bias=False), nn.Tanh() ) self.apply(weights_init) def dconv_bn_relu(self, in_dim, out_dim): return nn.Sequential( nn.ConvTranspose2d(in_dim, out_dim, kernel_size=5, stride=2, padding=2, output_padding=1, bias=False), #double height and width nn.BatchNorm2d(out_dim), nn.ReLU(True) ) def forward(self, x): y = self.l1(x) y = y.view(y.size(0), -1, 4, 4) y = self.l2(y) y = self.l3(y) return y Discriminator 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Discriminator(nn.Module): \u0026#34;\u0026#34;\u0026#34; Input shape: (batch, 3, 64, 64) Output shape: (batch) \u0026#34;\u0026#34;\u0026#34; def __init__(self, in_dim, feature_dim=64): super(Discriminator, self).__init__() #input: (batch, 3, 64, 64) \u0026#34;\u0026#34;\u0026#34; NOTE FOR SETTING DISCRIMINATOR: Remove last sigmoid layer for WGAN \u0026#34;\u0026#34;\u0026#34; self.l1 = nn.Sequential( nn.Conv2d(in_dim, feature_dim, kernel_size=4, stride=2, padding=1), #(batch, 3, 32, 32) nn.LeakyReLU(0.2), self.conv_bn_lrelu(feature_dim, feature_dim * 2), #(batch, 3, 16, 16) self.conv_bn_lrelu(feature_dim * 2, feature_dim * 4), #(batch, 3, 8, 8) self.conv_bn_lrelu(feature_dim * 4, feature_dim * 8), #(batch, 3, 4, 4) nn.Conv2d(feature_dim * 8, 1, kernel_size=4, stride=1, padding=0), nn.Sigmoid() ) self.apply(weights_init) def conv_bn_lrelu(self, in_dim, out_dim): \u0026#34;\u0026#34;\u0026#34; NOTE FOR SETTING DISCRIMINATOR: You can\u0026#39;t use nn.Batchnorm for WGAN-GP Use nn.InstanceNorm2d instead \u0026#34;\u0026#34;\u0026#34; return nn.Sequential( nn.Conv2d(in_dim, out_dim, 4, 2, 1), nn.BatchNorm2d(out_dim), nn.LeakyReLU(0.2), ) def forward(self, x): y = self.l1(x) y = y.view(-1) return y ","date":"2021-08-08T00:00:00Z","permalink":"https://sandyness.github.io/p/generative-adversarial-network/","title":"Generative Adversarial Network"},{"content":"标题 HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt;\n段落 段落\n引用 footer or cite element\n不带属性引用 Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n带属性的引用 Don\u0026rsquo;t communicate by sharing memory, share memory by communicating. — Rob Pike1\n表格 Name Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit Phasellus at accumsan nulla s Proin e 代码块 代码高亮 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; hugo 高亮代码块 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff 代码块 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] 列表 有序列表 First item 无序列表 List item Nested list Fruit Apple Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","permalink":"https://sandyness.github.io/p/markdown%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/","title":"Markdown语法指南"}]